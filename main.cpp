#include <iostream>
#include <string>
using namespace std;

struct Order {
    int orderId;
    string foodName;
    Order* next;
};

class OrderQueue {
private:
    Order* front;
    Order* rear;
    int nextId;

public:
    OrderQueue() {
        front = rear = nullptr;
        nextId = 1;
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß
    void addOrder(const string& foodName) {
        Order* newOrder = new Order{nextId++, foodName, nullptr};
        if (rear == nullptr) {
            front = rear = newOrder;
        } else {
            rear->next = newOrder;
            rear = newOrder;
        }
        cout << "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå #" << newOrder->orderId << ": " << foodName << " ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß\n";
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ (‡∏´‡∏ô‡πâ‡∏≤ queue)
    void processOrder() {
        if (front == nullptr) {
            cout << "üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß\n";
            return;
        }
        cout << "üë®‚Äçüç≥ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå #" << front->orderId << ": " << front->foodName << endl;
    }

    // ‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤ queue ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    void completeOrder() {
        if (front == nullptr) {
            cout << "üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß\n";
            return;
        }
        Order* temp = front;
        cout << "‚úÖ ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå #" << temp->orderId << ": " << temp->foodName << " ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÅ‡∏•‡πâ‡∏ß\n";
        front = front->next;
        if (front == nullptr) rear = nullptr;
        delete temp;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    void showOrders() {
        if (front == nullptr) {
            cout << "üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß\n";
            return;
        }

        Order* temp = front;
        cout << "üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß:\n";
        while (temp != nullptr) {
            cout << " - #" << temp->orderId << ": " << temp->foodName << endl;
            temp = temp->next;
        }
    }

    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç
    void cancelOrder(int id) {
        if (front == nullptr) {
            cout << "üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß\n";
            return;
        }

        Order* current = front;
        Order* prev = nullptr;

        while (current != nullptr && current->orderId != id) {
            prev = current;
            current = current->next;
        }

        if (current == nullptr) {
            cout << "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç #" << id << "\n";
            return;
        }

        if (current == front) {
            front = front->next;
            if (front == nullptr) rear = nullptr;
        } else {
            prev->next = current->next;
            if (current == rear) rear = prev;
        }

        cout << "üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå #" << current->orderId << ": " << current->foodName << " ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n";
        delete current;
    }

    ~OrderQueue() {
        while (front != nullptr) {
            Order* temp = front;
            front = front->next;
            delete temp;
        }
    }
};

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
int main() {
    OrderQueue queue;
    int choice;
    string foodName;
    int orderId;

    do {
        cout << "\n=== ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ===\n";
        cout << "1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå\n";
        cout << "2. ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå\n";
        cout << "3. ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô\n";
        cout << "4. ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå\n";
        cout << "5. ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå\n";
        cout << "0. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö\n";
        cout << "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π: ";
        cin >> choice;
        cin.ignore(); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πâ‡∏≤‡∏á buffer

        switch (choice) {
            case 1:
                cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ";
                getline(cin, foodName);
                queue.addOrder(foodName);
                break;
            case 2:
                queue.processOrder();
                break;
            case 3:
                queue.completeOrder();
                break;
            case 4:
                queue.showOrders();
                break;
            case 5:
                cout << "‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å: ";
                cin >> orderId;
                queue.cancelOrder(orderId);
                break;
            case 0:
                cout << "üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß\n";
                break;
            default:
                cout << "‚ö†Ô∏è ‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n";
        }

    } while (choice != 0);

    return 0;
}
